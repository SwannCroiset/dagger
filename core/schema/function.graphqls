scalar FunctionID

extend type Query {
  "Load a function by ID"
  function(id: FunctionID!): Function!
}

type Function {
  id: FunctionID!

  "The name of the function"
  name: String!

  "The type returned by this function"
  returnType: TypeDef!

  "A doc string for the function, if any"
  description: String

  "Returns the function with the doc string"
  withDescription(description: String!): Function!

  "Arguments accepted by this function, if any"
  args: [FunctionArg!]

  "Returns the function with the provided argument"
  withArg(
    "The name of the argument"
    name: String!
    "The type of the argument"
    typeDef: TypeDefID!
    "A doc string for the argument, if any"
    description: String
    "A default value to use for this argument if not explicitly set by the caller, if any"
    defaultValue: JSON
  ): Function!

  """
  Execute this function using dynamic input+output types.

  Typically, it's preferable to invoke a function using a type
  safe graphql query rather than using this call field. However,
  call is useful for some advanced use cases where dynamically
  loading arbitrary modules and invoking functions in them is
  required.
  """
  call(input: [FunctionCallInput!]): JSON!
}

type FunctionArg {
  "The name of the argument"
  name: String

  "A doc string for the argument, if any"
  description: String

  "The type of the argument"
  typeDef: TypeDef!

  "A default value to use for this argument when not explicitly set by the caller, if any"
  defaultValue: JSON
}

input FunctionCallInput {
  "The name of the argument to the function"
  name: String!

  "The value of the argument represented as a string of the JSON serialization."
  value: JSON!
}

scalar TypeDefID

extend type Query {
  typeDef(id: TypeDefID): TypeDef!
}

"""
A definition of a parameter or return type in a Module.
"""
type TypeDef {
  id: TypeDefID!

  "The kind of type this is (e.g. primitive, list, object)"
  kind: TypeDefKind

  "Sets the kind of the type."
  withKind(kind: TypeDefKind!): TypeDef!

  "Whether this type can be set to null. Defaults to false."
  optional: Boolean!

  "Sets whether this type can be set to null."
  withOptional(optional: Boolean!): TypeDef!

  "Returns a TypeDef of kind List with the provided type for its elements."
  withListOf(elementType: TypeDefID!): TypeDef!

  """
  If kind is LIST, the list-specific type definition.
  If kind is not LIST, this will be null.
  """
  asList: ListTypeDef

  """
  Returns a TypeDef of kind Object with the provided name.

  Note that an object's fields and functions may be omitted if the intent is
  only to refer to an object. This is how functions are able to return their
  own object, or any other circular reference.
  """
  withObject(name: String!, description: String): TypeDef!

  "Adds a static field for an Object TypeDef, failing if the type is not an object."
  withField(
    "The name of the field in the object"
    name: String!,
    "The type of the field"
    typeDef: TypeDefID!
    "A doc string for the field, if any"
    description: String
  ): TypeDef!

  "Adds a function for an Object TypeDef, failing if the type is not an object."
  withFunction(function: FunctionID!): TypeDef!

  """
  If kind is OBJECT, the object-specific type definition.
  If kind is not OBJECT, this will be null.
  """
  asObject: ObjectTypeDef
}

"""
A definition of a custom object defined in a Module.
"""
type ObjectTypeDef {
  "The name of the object"
  name: String!

  "The doc string for the object, if any"
  description: String

  "Static fields defined on this object, if any"
  fields: [FieldTypeDef!]

  "Functions defined on this object, if any"
  functions: [Function!]
}

"""
A definition of a field on a custom object defined in a Module.
A field on an object has a static value, as opposed to a function on an
object whose value is computed by invoking code (and can accept arguments).
"""
type FieldTypeDef {
  "The name of the field in the object"
  name: String!

  "A doc string for the field, if any"
  description: String

  "The type of the field"
  typeDef: TypeDef!
}

type ListTypeDef {
  "The type of the elements in the list"
  elementTypeDef: TypeDef!
}

enum TypeDefKind {
  "Primitive types"
  StringKind
  IntegerKind
  BooleanKind

  "Complex types"
  ListKind
  ObjectKind

  "Void is a special kind that can only be used as a return type"
  VoidKind
}
